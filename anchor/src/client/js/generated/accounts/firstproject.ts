/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const FIRSTPROJECT_DISCRIMINATOR = new Uint8Array([
  255, 176, 4, 245, 188, 253, 124, 25,
]);

export function getFirstprojectDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(FIRSTPROJECT_DISCRIMINATOR);
}

export type Firstproject = { discriminator: ReadonlyUint8Array; count: number };

export type FirstprojectArgs = { count: number };

export function getFirstprojectEncoder(): FixedSizeEncoder<FirstprojectArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['count', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: FIRSTPROJECT_DISCRIMINATOR })
  );
}

export function getFirstprojectDecoder(): FixedSizeDecoder<Firstproject> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['count', getU8Decoder()],
  ]);
}

export function getFirstprojectCodec(): FixedSizeCodec<FirstprojectArgs, Firstproject> {
  return combineCodec(getFirstprojectEncoder(), getFirstprojectDecoder());
}

export function decodeFirstproject<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Firstproject, TAddress>;
export function decodeFirstproject<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Firstproject, TAddress>;
export function decodeFirstproject<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Firstproject, TAddress> | MaybeAccount<Firstproject, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getFirstprojectDecoder()
  );
}

export async function fetchFirstproject<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Firstproject, TAddress>> {
  const maybeAccount = await fetchMaybeFirstproject(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeFirstproject<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Firstproject, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeFirstproject(maybeAccount);
}

export async function fetchAllFirstproject(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Firstproject>[]> {
  const maybeAccounts = await fetchAllMaybeFirstproject(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeFirstproject(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Firstproject>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeFirstproject(maybeAccount));
}

export function getFirstprojectSize(): number {
  return 9;
}
